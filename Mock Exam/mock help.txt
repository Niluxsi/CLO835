 export VERSION=v1.22.0
    curl -LO "https://dl.k8s.io/release/$VERSION/bin/linux/amd64/kubectl" 

-run init_kind.sh
chmod 700 init_kind.sh
./init_kind.sh


-build docker image
docker build -t app-image -f app/Dockerfile_mock app

-now check docker images:
docker images


-run container of image 'app-image'
docker run -d --name application1 -p 8081:8081 app-image
docker ps
curl localhost:8081


aws configure set aws_access_key_id 
aws configure set aws_secret_access_key 
aws configure set aws_session_token 



nano ~/.aws/credentials


Step 4: Publish the Docker Image to Amazon ECR

4.1 Login to your ECR registry using the AWS CLI:
aws ecr get-login-password --region <your-preferred-region> | docker login --username AWS --password-stdin <your-account-id>.dkr.ecr.<your-preferred-region>.amazonaws.com

eg: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 745655567840.dkr.ecr.us-east-1.amazonaws.com

Create the ECR Repository:
aws ecr create-repository --repository-name mock-repo

4.2 Tag your local Docker image with the ECR repository URI:
docker tag your-ecr-repo/your-image-tag:latest <your-account-id>.dkr.ecr.<your-preferred-region>.amazonaws.com/your-ecr-repo:your-image-tag

docker tag <image-id> 745655567840.dkr.ecr.us-east-1.amazonaws.com/mock-repo:app-image

docker tag 4a9474634348 745655567840.dkr.ecr.us-east-1.amazonaws.com/mock-repo:app-image


4.3 Push the Docker image to ECR:
docker push <your-account-id>.dkr.ecr.<your-preferred-region>.amazonaws.com/your-ecr-repo:your-image-tag

docker push 745655567840.dkr.ecr.us-east-1.amazonaws.com/mock-repo:app-image 


kubectl create namespace test


kubectl create secret docker-registry creds-mock   --docker-server=745655567840.dkr.ecr.us-east-1.amazonaws.com/   --docker-username=AWS   --docker-password=$(aws ecr get-login-password)   --namespace=test


df -h


Create the Deployment:


cd Manifests
kubectl apply -f storage.yaml -n test
kubectl apply -f persistentVolumeClaim.yaml -n test

kubectl apply -f deployment.yaml -n test

#Verify Deployment, ReplicaSet, and Pod:

kubectl get deployments -n test
kubectl get replicasets -n test
kubectl get pods -n test

kubectl apply -f serviceClusterIp.yaml -n test
kubectl apply -f serviceNodePort.yaml -n test

kubectl get services -n test

#Verify the current number of replicas for your deployment:
kubectl get deployment app-mock -n test

#Scale the deployment to 3 replicas:
kubectl scale deployment app-mock --replicas=3 -n test

#Verify that the deployment has been scaled
kubectl get deployment app-mock -n test

#Verify the service has been created
kubectl get service node-app -n test

#to set up port forwarding
kubectl port-forward service/node-app 8081:80 -n test

#if pod not created 
kubectl get pods -n test

kubectl port-forward app-mock-???-???(pod name) 8081:8081 -n test


to increase the space of c9
pip3 install --user --upgrade boto3
export instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
python -c "import boto3
import os
from botocore.exceptions import ClientError 
ec2 = boto3.client('ec2')
volume_info = ec2.describe_volumes(
    Filters=[
        {
            'Name': 'attachment.instance-id',
            'Values': [
                os.getenv('instance_id')
            ]
        }
    ]
)
volume_id = volume_info['Volumes'][0]['VolumeId']
try:
    resize = ec2.modify_volume(    
            VolumeId=volume_id,    
            Size=30
    )
    print(resize)
except ClientError as e:
    if e.response['Error']['Code'] == 'InvalidParameterValue':
        print('ERROR MESSAGE: {}'.format(e))"
if [ $? -eq 0 ]; then
    sudo reboot
fi



--delete existing cluste
kind delete cluster --name kind

--list clusters
kind get clusters

#to delete pods starting with mock-app

kubectl delete pods -l app=mock-app

#to delete all the pods in namespace
kubectl delete pods --all -n test


If everything is set up correctly, you should see the application's response in your web browser.

Step 4: Cleanup (Optional):

After verifying the application's accessibility, you can stop the port forwarding by pressing CTRL + C in the terminal where the port forwarding command is running.

Additionally, you can delete the resources (Deployment and Service) if you no longer need them using the following commands:

bash
Copy code
kubectl delete service node-app -n test
kubectl delete deployment clo835-mock -n test












